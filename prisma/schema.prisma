generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int                      @id @default(autoincrement())

    fullName        String
    email           String      @unique
    password        String

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    // Внешние связи //
    cart            Cart?
    orders           Order[]
}

model Category {
    id              Int         @id @default(autoincrement())

    name            String      @unique

    products        Product[]
}

model Product {
    id              Int         @id @default(autoincrement())

    name            String
    imageUrl        String

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    // Внешние связи //
    ingredients     Ingredient[]

    categoryId      Int
    category        Category    @relation(fields: [categoryId], references: [id])

    variants        ProductItem[]
}

model ProductItem {
    id              Int         @id @default(autoincrement())

    price           Int
    size            Int?
    pizzaType       Int?

    // Внешние связи //
    productId       Int
    product         Product     @relation(fields: [productId], references: [id])

    cartItems       CartItem[]
}

model Ingredient {
    id              Int         @id @default(autoincrement())

    name            String
    price           Int
    imageUrl        String

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    // Внешние связи //
    product         Product[]
    cartItems       CartItem[]
}

model Cart {
    id              Int         @id @default(autoincrement())

    token           String

    totalAmount     Int         @default(0)

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    // Внешние связи //
    userId          Int?        @unique
    user            User?       @relation(fields: [userId], references: [id])

    items       CartItem[]
}

model CartItem {
    id              Int         @id @default(autoincrement())

    quantity        Int         @default(1)

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    // Внешние связи //
    cartId          Int
    cart            Cart        @relation(fields: [cartId], references: [id])

    productItemId   Int
    productItem     ProductItem @relation(fields: [productItemId], references: [id])

    ingredients     Ingredient[]
}

model Order {
    id              Int         @id @default(autoincrement())

    token           String
    status          OrderStatus
    paymentId       String?

    items           Json

    full

    // Внешние связи //
    userId          Int?
    user            User?       @relation(fields: [userId], references: [id])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}